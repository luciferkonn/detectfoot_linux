// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DetectorNewStep_DetectorPeak (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        newValue,
        oldValue,
        peakOfWave,
        peakOfWave_ap_vld,
        valleyOfWave,
        valleyOfWave_ap_vld,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_41200000 = 32'b1000001001000000000000000000000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] newValue;
input  [31:0] oldValue;
output  [31:0] peakOfWave;
output   peakOfWave_ap_vld;
output  [31:0] valleyOfWave;
output   valleyOfWave_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg peakOfWave_ap_vld;
reg valleyOfWave_ap_vld;
reg[0:0] ap_return;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg   [31:0] isDirectionUp = 32'b00000000000000000000000000000000;
reg   [31:0] continueUpCount = 32'b00000000000000000000000000000000;
reg   [31:0] continueUpFormerCount = 32'b00000000000000000000000000000000;
reg   [31:0] isDirectionUp_load_reg_300;
wire   [0:0] or_cond_fu_235_p2;
reg   [0:0] or_cond_reg_308;
wire   [0:0] tmp_46_fu_241_p2;
reg   [0:0] tmp_46_reg_312;
reg   [0:0] tmp_2_phi_fu_59_p4;
reg   [0:0] tmp_2_reg_56;
wire   [0:0] tmp_44_fu_193_p2;
reg   [0:0] p_0_phi_fu_71_p6;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_66;
wire   [0:0] demorgan_fu_283_p2;
wire   [0:0] or_cond2_fu_272_p2;
wire   [31:0] tmp_1_fu_223_p2;
wire   [31:0] tmp_43_fu_83_p0;
wire   [31:0] tmp_43_fu_83_p1;
wire   [31:0] tmp_45_fu_89_p0;
wire   [31:0] tmp_45_fu_89_p1;
reg   [31:0] grp_fu_99_p0;
wire   [31:0] newValue_to_int_fu_115_p1;
wire   [31:0] oldValue_to_int_fu_133_p1;
wire   [7:0] tmp_fu_119_p4;
wire   [22:0] tmp_20_fu_129_p1;
wire   [0:0] notrhs_fu_157_p2;
wire   [0:0] notlhs_fu_151_p2;
wire   [7:0] tmp_s_fu_137_p4;
wire   [22:0] tmp_21_fu_147_p1;
wire   [0:0] notrhs3_fu_175_p2;
wire   [0:0] notlhs2_fu_169_p2;
wire   [0:0] tmp_40_fu_163_p2;
wire   [0:0] tmp_41_fu_181_p2;
wire   [0:0] tmp_42_fu_187_p2;
wire   [0:0] tmp_43_fu_83_p2;
wire   [0:0] grp_fu_99_p2;
wire   [0:0] tmp_45_fu_89_p2;
wire   [30:0] tmp_22_fu_251_p4;
wire   [0:0] icmp_fu_261_p2;
wire   [0:0] tmp_47_fu_267_p2;
wire   [4:0] tmp_43_fu_83_opcode;
wire   [4:0] tmp_45_fu_89_opcode;
reg   [0:0] ap_return_preg = 1'b0;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_41;


DetectorNewStep_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DetectorNewStep_fcmp_32ns_32ns_1_1_U0(
    .din0( tmp_43_fu_83_p0 ),
    .din1( tmp_43_fu_83_p1 ),
    .opcode( tmp_43_fu_83_opcode ),
    .dout( tmp_43_fu_83_p2 )
);

DetectorNewStep_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DetectorNewStep_fcmp_32ns_32ns_1_1_U1(
    .din0( tmp_45_fu_89_p0 ),
    .din1( tmp_45_fu_89_p1 ),
    .opcode( tmp_45_fu_89_opcode ),
    .dout( tmp_45_fu_89_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv1_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            ap_return_preg <= p_0_phi_fu_71_p6;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_41) begin
        if (~(ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            continueUpCount <= tmp_1_fu_223_p2;
        end else if ((ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            continueUpCount <= ap_const_lv32_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_41) begin
        if (~(ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            isDirectionUp[0] <= 1'b1;
        end else if ((ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            isDirectionUp[0] <= 1'b0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_41) begin
        if (~(ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            tmp_2_reg_56 <= ap_const_lv1_1;
        end else if ((ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            tmp_2_reg_56 <= ap_const_lv1_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_44_fu_193_p2))) begin
        continueUpFormerCount <= continueUpCount;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        isDirectionUp_load_reg_300[0] <= isDirectionUp[0];
        or_cond_reg_308 <= or_cond_fu_235_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (or_cond_fu_235_p2 == ap_const_lv1_0))) begin
        tmp_46_reg_312 <= tmp_46_fu_241_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (p_0_phi_fu_71_p6 or ap_sig_cseq_ST_st2_fsm_1 or ap_return_preg)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_return = p_0_phi_fu_71_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20)
begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_66)
begin
    if (ap_sig_bdd_66) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// grp_fu_99_p0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or isDirectionUp or isDirectionUp_load_reg_300 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_fu_99_p0 = isDirectionUp_load_reg_300;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        grp_fu_99_p0 = isDirectionUp;
    end else begin
        grp_fu_99_p0 = 'bx;
    end
end

/// p_0_phi_fu_71_p6 assign process. ///
always @ (or_cond_reg_308 or ap_sig_cseq_ST_st2_fsm_1 or demorgan_fu_283_p2 or or_cond2_fu_272_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (or_cond_reg_308 == ap_const_lv1_0) & (ap_const_lv1_0 == or_cond2_fu_272_p2))) begin
        p_0_phi_fu_71_p6 = ap_const_lv1_1;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((~(or_cond_reg_308 == ap_const_lv1_0) & ~(ap_const_lv1_0 == demorgan_fu_283_p2)) | (~(ap_const_lv1_0 == demorgan_fu_283_p2) & ~(ap_const_lv1_0 == or_cond2_fu_272_p2)))) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((~(or_cond_reg_308 == ap_const_lv1_0) & (ap_const_lv1_0 == demorgan_fu_283_p2)) | ((ap_const_lv1_0 == demorgan_fu_283_p2) & ~(ap_const_lv1_0 == or_cond2_fu_272_p2)))))) begin
        p_0_phi_fu_71_p6 = ap_const_lv1_0;
    end else begin
        p_0_phi_fu_71_p6 = 'bx;
    end
end

/// peakOfWave_ap_vld assign process. ///
always @ (or_cond_reg_308 or ap_sig_cseq_ST_st2_fsm_1 or or_cond2_fu_272_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (or_cond_reg_308 == ap_const_lv1_0) & (ap_const_lv1_0 == or_cond2_fu_272_p2))) begin
        peakOfWave_ap_vld = ap_const_logic_1;
    end else begin
        peakOfWave_ap_vld = ap_const_logic_0;
    end
end

/// tmp_2_phi_fu_59_p4 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or tmp_44_fu_193_p2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        if (~(ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            tmp_2_phi_fu_59_p4 = ap_const_lv1_1;
        end else if ((ap_const_lv1_0 == tmp_44_fu_193_p2)) begin
            tmp_2_phi_fu_59_p4 = ap_const_lv1_0;
        end else begin
            tmp_2_phi_fu_59_p4 = 'bx;
        end
    end else begin
        tmp_2_phi_fu_59_p4 = 'bx;
    end
end

/// valleyOfWave_ap_vld assign process. ///
always @ (or_cond_reg_308 or ap_sig_cseq_ST_st2_fsm_1 or demorgan_fu_283_p2 or or_cond2_fu_272_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((~(or_cond_reg_308 == ap_const_lv1_0) & ~(ap_const_lv1_0 == demorgan_fu_283_p2)) | (~(ap_const_lv1_0 == demorgan_fu_283_p2) & ~(ap_const_lv1_0 == or_cond2_fu_272_p2))))) begin
        valleyOfWave_ap_vld = ap_const_logic_1;
    end else begin
        valleyOfWave_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_41 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    ap_sig_bdd_41 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0));
end

/// ap_sig_bdd_66 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_66 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign demorgan_fu_283_p2 = (tmp_2_reg_56 & grp_fu_99_p2);
assign grp_fu_99_p2 = (grp_fu_99_p0 == ap_const_lv32_0? 1'b1: 1'b0);
assign icmp_fu_261_p2 = ($signed(tmp_22_fu_251_p4) < $signed(31'b1)? 1'b1: 1'b0);
assign newValue_to_int_fu_115_p1 = newValue;
assign notlhs2_fu_169_p2 = (tmp_s_fu_137_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notlhs_fu_151_p2 = (tmp_fu_119_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notrhs3_fu_175_p2 = (tmp_21_fu_147_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign notrhs_fu_157_p2 = (tmp_20_fu_129_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign oldValue_to_int_fu_133_p1 = oldValue;
assign or_cond2_fu_272_p2 = (icmp_fu_261_p2 & tmp_47_fu_267_p2);
assign or_cond_fu_235_p2 = (tmp_2_phi_fu_59_p4 | grp_fu_99_p2);
assign peakOfWave = oldValue;
assign tmp_1_fu_223_p2 = (continueUpCount + ap_const_lv32_1);
assign tmp_20_fu_129_p1 = newValue_to_int_fu_115_p1[22:0];
assign tmp_21_fu_147_p1 = oldValue_to_int_fu_133_p1[22:0];
assign tmp_22_fu_251_p4 = {{continueUpFormerCount[ap_const_lv32_1F : ap_const_lv32_1]}};
assign tmp_40_fu_163_p2 = (notrhs_fu_157_p2 | notlhs_fu_151_p2);
assign tmp_41_fu_181_p2 = (notrhs3_fu_175_p2 | notlhs2_fu_169_p2);
assign tmp_42_fu_187_p2 = (tmp_40_fu_163_p2 & tmp_41_fu_181_p2);
assign tmp_43_fu_83_opcode = ap_const_lv5_3;
assign tmp_43_fu_83_p0 = newValue;
assign tmp_43_fu_83_p1 = oldValue;
assign tmp_44_fu_193_p2 = (tmp_42_fu_187_p2 & tmp_43_fu_83_p2);
assign tmp_45_fu_89_opcode = ap_const_lv5_3;
assign tmp_45_fu_89_p0 = oldValue;
assign tmp_45_fu_89_p1 = ap_const_lv32_41200000;
assign tmp_46_fu_241_p2 = (tmp_41_fu_181_p2 & tmp_45_fu_89_p2);
assign tmp_47_fu_267_p2 = (tmp_46_reg_312 ^ ap_const_lv1_1);
assign tmp_fu_119_p4 = {{newValue_to_int_fu_115_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign tmp_s_fu_137_p4 = {{oldValue_to_int_fu_133_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign valleyOfWave = oldValue;
always @ (posedge ap_clk)
begin
    isDirectionUp[31:1] <= 31'b0000000000000000000000000000000;
    isDirectionUp_load_reg_300[31:1] <= 31'b0000000000000000000000000000000;
end



endmodule //DetectorNewStep_DetectorPeak

