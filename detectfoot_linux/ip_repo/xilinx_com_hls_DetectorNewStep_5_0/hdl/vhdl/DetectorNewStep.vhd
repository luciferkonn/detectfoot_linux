-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DetectorNewStep is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    oriValues_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    oriValues_TVALID : IN STD_LOGIC;
    oriValues_TREADY : OUT STD_LOGIC;
    step_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    step_TVALID : OUT STD_LOGIC;
    step_TREADY : IN STD_LOGIC );
end;


architecture behav of DetectorNewStep is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DetectorNewStep,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.220000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=13,HLS_SYN_FF=2840,HLS_SYN_LUT=6167}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3FA66666 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101001100110011001100110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_F9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_59 : BOOLEAN;
    signal peakOfWave : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal valleyOfWave : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_81 : BOOLEAN;
    signal exitcond1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_88 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal j_1_fu_308_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_reg_708 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal i_2_fu_341_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_753 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal exitcond_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_step_TREADY : STD_LOGIC;
    signal tmp_7_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal values_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gravityOld_1_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_DetectorPeak_fu_231_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_199 : BOOLEAN;
    signal grp_DetectorNewStep_DetectorPeak_fu_231_ap_done : STD_LOGIC;
    signal currentTime_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentTime_load_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_217 : BOOLEAN;
    signal p_Result_s_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal loc_V_1_fu_425_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_807 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_457_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_817 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_s_fu_533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal tmp_10_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_847 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_262 : BOOLEAN;
    signal values_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal values_ce0 : STD_LOGIC;
    signal values_we0 : STD_LOGIC;
    signal values_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal currentTime_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal currentTime_ce0 : STD_LOGIC;
    signal currentTime_we0 : STD_LOGIC;
    signal currentTime_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start : STD_LOGIC;
    signal grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_done : STD_LOGIC;
    signal grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_idle : STD_LOGIC;
    signal grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_ready : STD_LOGIC;
    signal grp_DetectorNewStep_Peak_Valley_Thread_fu_218_value_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_DetectorPeak_fu_231_ap_start : STD_LOGIC;
    signal grp_DetectorNewStep_DetectorPeak_fu_231_ap_idle : STD_LOGIC;
    signal grp_DetectorNewStep_DetectorPeak_fu_231_ap_ready : STD_LOGIC;
    signal grp_DetectorNewStep_DetectorPeak_fu_231_newValue : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_DetectorPeak_fu_231_oldValue : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_DetectorPeak_fu_231_peakOfWave : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_DetectorPeak_fu_231_peakOfWave_ap_vld : STD_LOGIC;
    signal grp_DetectorNewStep_DetectorPeak_fu_231_valleyOfWave : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DetectorNewStep_DetectorPeak_fu_231_valleyOfWave_ap_vld : STD_LOGIC;
    signal j_reg_182 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_311 : BOOLEAN;
    signal gravityOld_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_323 : BOOLEAN;
    signal i_reg_206 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_DetectorNewStep_DetectorPeak_fu_231_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_374 : BOOLEAN;
    signal tmp_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ThreadValue_1_1_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal timeOfLastPeak_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal timeOfThisPeak_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal step2_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal step2_1_fu_665_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_step_TREADY : STD_LOGIC := '0';
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_441 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_448 : BOOLEAN;
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_464 : BOOLEAN;
    signal gravityOld_to_int_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_356_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_366_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_415_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast8_fu_429_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_433_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_i_i_fu_447_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_cast_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_1_fu_465_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sh_assign_1_cast_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_479_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_fu_472_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_6_i_i_fu_482_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_7_i_i_fu_486_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_492_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_12_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_510_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_520_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_to_int_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ThreadValue_to_int_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_562_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_572_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_580_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_590_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal step2_2_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal step2_3_fu_653_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal timeOfThisPeak_2_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_250_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_648 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_656 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_666 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_674 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_682 : BOOLEAN;
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_692 : BOOLEAN;
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_700 : BOOLEAN;
    signal grp_fu_254_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_713 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_721 : BOOLEAN;
    signal grp_fu_258_ce : STD_LOGIC;
    signal grp_fu_266_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_273_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_sig_bdd_415 : BOOLEAN;

    component DetectorNewStep_Peak_Valley_Thread IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        value_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DetectorNewStep_DetectorPeak IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        newValue : IN STD_LOGIC_VECTOR (31 downto 0);
        oldValue : IN STD_LOGIC_VECTOR (31 downto 0);
        peakOfWave : OUT STD_LOGIC_VECTOR (31 downto 0);
        peakOfWave_ap_vld : OUT STD_LOGIC;
        valleyOfWave : OUT STD_LOGIC_VECTOR (31 downto 0);
        valleyOfWave_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DetectorNewStep_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DetectorNewStep_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DetectorNewStep_fsqrt_32ns_32ns_32_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DetectorNewStep_values IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    values_U : component DetectorNewStep_values
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => values_address0,
        ce0 => values_ce0,
        we0 => values_we0,
        d0 => values_d0,
        q0 => values_q0);

    currentTime_U : component DetectorNewStep_values
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => currentTime_address0,
        ce0 => currentTime_ce0,
        we0 => currentTime_we0,
        d0 => currentTime_d0,
        q0 => currentTime_q0);

    grp_DetectorNewStep_Peak_Valley_Thread_fu_218 : component DetectorNewStep_Peak_Valley_Thread
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start,
        ap_done => grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_done,
        ap_idle => grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_idle,
        ap_ready => grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_ready,
        value_r => grp_DetectorNewStep_Peak_Valley_Thread_fu_218_value_r,
        ap_return => grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_return);

    grp_DetectorNewStep_DetectorPeak_fu_231 : component DetectorNewStep_DetectorPeak
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_DetectorNewStep_DetectorPeak_fu_231_ap_start,
        ap_done => grp_DetectorNewStep_DetectorPeak_fu_231_ap_done,
        ap_idle => grp_DetectorNewStep_DetectorPeak_fu_231_ap_idle,
        ap_ready => grp_DetectorNewStep_DetectorPeak_fu_231_ap_ready,
        newValue => grp_DetectorNewStep_DetectorPeak_fu_231_newValue,
        oldValue => grp_DetectorNewStep_DetectorPeak_fu_231_oldValue,
        peakOfWave => grp_DetectorNewStep_DetectorPeak_fu_231_peakOfWave,
        peakOfWave_ap_vld => grp_DetectorNewStep_DetectorPeak_fu_231_peakOfWave_ap_vld,
        valleyOfWave => grp_DetectorNewStep_DetectorPeak_fu_231_valleyOfWave,
        valleyOfWave_ap_vld => grp_DetectorNewStep_DetectorPeak_fu_231_valleyOfWave_ap_vld,
        ap_return => grp_DetectorNewStep_DetectorPeak_fu_231_ap_return);

    DetectorNewStep_faddfsub_32ns_32ns_32_5_full_dsp_U15 : component DetectorNewStep_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        opcode => grp_fu_250_opcode,
        ce => grp_fu_250_ce,
        dout => grp_fu_250_p2);

    DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp_U16 : component DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp_U17 : component DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_258_p0,
        din1 => grp_fu_258_p1,
        ce => grp_fu_258_ce,
        dout => grp_fu_258_p2);

    DetectorNewStep_fcmp_32ns_32ns_1_1_U18 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        opcode => grp_fu_266_opcode,
        dout => grp_fu_266_p2);

    DetectorNewStep_fsqrt_32ns_32ns_32_12_U19 : component DetectorNewStep_fsqrt_32ns_32ns_32_12
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_273_p0,
        din1 => grp_fu_273_p1,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_step_TREADY assign process. --
    ap_reg_ioackin_step_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_step_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_415) then
                    if (not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY)))) then 
                        ap_reg_ioackin_step_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = step_TREADY)) then 
                        ap_reg_ioackin_step_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- grp_DetectorNewStep_DetectorPeak_fu_231_ap_start_ap_start_reg assign process. --
    grp_DetectorNewStep_DetectorPeak_fu_231_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_DetectorNewStep_DetectorPeak_fu_231_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
                    grp_DetectorNewStep_DetectorPeak_fu_231_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_DetectorNewStep_DetectorPeak_fu_231_ap_ready)) then 
                    grp_DetectorNewStep_DetectorPeak_fu_231_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start_ap_start_reg assign process. --
    grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) and not((ap_const_lv1_0 = tmp_39_fu_685_p2)))) then 
                    grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_ready)) then 
                    grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ThreadValue_1_1_fu_120 assign process. --
    ThreadValue_1_1_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) and (ap_const_lv1_0 = tmp_29_reg_768) and not((ap_const_lv1_0 = tmp_9_reg_778)) and not((ap_const_lv1_0 = tmp_39_reg_852)) and not(((ap_const_lv1_0 = tmp_29_reg_768) and not((ap_const_lv1_0 = tmp_9_reg_778)) and not((ap_const_lv1_0 = tmp_39_reg_852)) and (ap_const_logic_0 = grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_done))))) then 
                ThreadValue_1_1_fu_120 <= grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_return;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_88) and not((exitcond1_fu_302_p2 = ap_const_lv1_0)))) then 
                ThreadValue_1_1_fu_120 <= ap_const_lv32_40000000;
            end if; 
        end if;
    end process;

    -- gravityOld_reg_194 assign process. --
    gravityOld_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) and not(((ap_const_lv1_0 = tmp_29_reg_768) and not((ap_const_lv1_0 = tmp_9_reg_778)) and not((ap_const_lv1_0 = tmp_39_reg_852)) and (ap_const_logic_0 = grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_done))))) then 
                gravityOld_reg_194 <= gravityOld_1_reg_772;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_88) and not((exitcond1_fu_302_p2 = ap_const_lv1_0)))) then 
                gravityOld_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_reg_206 assign process. --
    i_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) and not(((ap_const_lv1_0 = tmp_29_reg_768) and not((ap_const_lv1_0 = tmp_9_reg_778)) and not((ap_const_lv1_0 = tmp_39_reg_852)) and (ap_const_logic_0 = grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_done))))) then 
                i_reg_206 <= i_2_reg_753;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_88) and not((exitcond1_fu_302_p2 = ap_const_lv1_0)))) then 
                i_reg_206 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- j_reg_182 assign process. --
    j_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28))) then 
                j_reg_182 <= j_1_reg_708;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_182 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- step2_fu_128 assign process. --
    step2_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                step2_fu_128 <= step2_1_fu_665_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_88) and not((exitcond1_fu_302_p2 = ap_const_lv1_0)))) then 
                step2_fu_128 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- timeOfLastPeak_fu_124 assign process. --
    timeOfLastPeak_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                timeOfLastPeak_fu_124 <= timeOfThisPeak_fu_678_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_88) and not((exitcond1_fu_302_p2 = ap_const_lv1_0)))) then 
                timeOfLastPeak_fu_124 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                currentTime_load_reg_787 <= currentTime_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                gravityOld_1_reg_772 <= values_q0;
                tmp_29_reg_768 <= tmp_29_fu_388_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY))))) then
                i_2_reg_753 <= i_2_fu_341_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                isNeg_reg_812 <= sh_assign_fu_433_p2(8 downto 8);
                loc_V_1_reg_807 <= loc_V_1_fu_425_p1;
                p_Result_s_reg_802 <= p_Val2_1_fu_404_p1(31 downto 31);
                sh_assign_1_reg_817 <= sh_assign_1_fu_457_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_88))) then
                j_1_reg_708 <= j_1_fu_308_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then
                p_Val2_s_reg_823 <= p_Val2_s_fu_533_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (ap_const_logic_1 = grp_DetectorNewStep_DetectorPeak_fu_231_peakOfWave_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and (ap_const_logic_1 = grp_DetectorNewStep_DetectorPeak_fu_231_peakOfWave_ap_vld)))) then
                peakOfWave <= grp_DetectorNewStep_DetectorPeak_fu_231_peakOfWave;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_302_p2 = ap_const_lv1_0) and not(ap_sig_bdd_88)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((oriValues_TVALID = ap_const_logic_0))))) then
                reg_282 <= oriValues_TDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then
                reg_288 <= grp_fu_254_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then
                reg_294 <= grp_fu_250_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then
                tmp_10_reg_835 <= tmp_10_fu_552_p2;
                tmp_32_reg_842 <= tmp_32_fu_606_p2;
                tmp_36_reg_847 <= tmp_36_fu_636_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_1_reg_740 <= grp_fu_258_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then
                tmp_39_reg_852 <= tmp_39_fu_685_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                tmp_5_reg_745 <= grp_fu_273_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond_fu_335_p2) and not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY))))) then
                    tmp_7_reg_758(10 downto 0) <= tmp_7_fu_347_p1(10 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_DetectorNewStep_DetectorPeak_fu_231_ap_done)))) then
                tmp_9_reg_778 <= grp_DetectorNewStep_DetectorPeak_fu_231_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (ap_const_logic_1 = grp_DetectorNewStep_DetectorPeak_fu_231_valleyOfWave_ap_vld)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and (ap_const_logic_1 = grp_DetectorNewStep_DetectorPeak_fu_231_valleyOfWave_ap_vld)))) then
                valleyOfWave <= grp_DetectorNewStep_DetectorPeak_fu_231_valleyOfWave;
            end if;
        end if;
    end process;
    tmp_7_reg_758(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, oriValues_TVALID, exitcond1_fu_302_p2, ap_sig_bdd_88, exitcond_fu_335_p2, ap_sig_ioackin_step_TREADY, tmp_29_fu_388_p2, tmp_29_reg_768, grp_DetectorNewStep_DetectorPeak_fu_231_ap_return, tmp_9_reg_778, grp_DetectorNewStep_DetectorPeak_fu_231_ap_done, tmp_39_reg_852, grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(ap_sig_bdd_88) and not((exitcond1_fu_302_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                elsif (((exitcond1_fu_302_p2 = ap_const_lv1_0) and not(ap_sig_bdd_88))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((oriValues_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((oriValues_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                if (not((oriValues_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st30_fsm_29 => 
                if ((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((ap_const_lv1_0 = exitcond_fu_335_p2) and not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY))))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                end if;
            when ap_ST_st31_fsm_30 => 
                if (not((ap_const_lv1_0 = tmp_29_fu_388_p2))) then
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                if ((not((ap_const_logic_0 = grp_DetectorNewStep_DetectorPeak_fu_231_ap_done)) and (ap_const_lv1_0 = grp_DetectorNewStep_DetectorPeak_fu_231_ap_return))) then
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                elsif ((not((ap_const_logic_0 = grp_DetectorNewStep_DetectorPeak_fu_231_ap_done)) and not((ap_const_lv1_0 = grp_DetectorNewStep_DetectorPeak_fu_231_ap_return)))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                if (not(((ap_const_lv1_0 = tmp_29_reg_768) and not((ap_const_lv1_0 = tmp_9_reg_778)) and not((ap_const_lv1_0 = tmp_39_reg_852)) and (ap_const_logic_0 = grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ThreadValue_to_int_fu_576_p1 <= ThreadValue_1_1_fu_120;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, exitcond_fu_335_p2, ap_sig_ioackin_step_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond_fu_335_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, exitcond_fu_335_p2, ap_sig_ioackin_step_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond_fu_335_p2)) and not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_199 assign process. --
    ap_sig_bdd_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_199 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_217 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_262 assign process. --
    ap_sig_bdd_262_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_262 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_311 assign process. --
    ap_sig_bdd_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_311 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_323 assign process. --
    ap_sig_bdd_323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_323 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_374 assign process. --
    ap_sig_bdd_374_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_374 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_415 assign process. --
    ap_sig_bdd_415_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, exitcond_fu_335_p2)
    begin
                ap_sig_bdd_415 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond_fu_335_p2)));
    end process;


    -- ap_sig_bdd_441 assign process. --
    ap_sig_bdd_441_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_441 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_448 assign process. --
    ap_sig_bdd_448_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_448 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_464 assign process. --
    ap_sig_bdd_464_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_464 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_59 assign process. --
    ap_sig_bdd_59_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_59 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_648 assign process. --
    ap_sig_bdd_648_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_648 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_656 assign process. --
    ap_sig_bdd_656_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_656 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_666 assign process. --
    ap_sig_bdd_666_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_666 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_674 assign process. --
    ap_sig_bdd_674_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_674 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_682 assign process. --
    ap_sig_bdd_682_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_682 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_692 assign process. --
    ap_sig_bdd_692_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_692 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_700 assign process. --
    ap_sig_bdd_700_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_700 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_713 assign process. --
    ap_sig_bdd_713_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_713 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_721 assign process. --
    ap_sig_bdd_721_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_721 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_81 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(oriValues_TVALID, exitcond1_fu_302_p2)
    begin
                ap_sig_bdd_88 <= ((oriValues_TVALID = ap_const_logic_0) and (exitcond1_fu_302_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_97 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_656)
    begin
        if (ap_sig_bdd_656) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_448)
    begin
        if (ap_sig_bdd_448) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_666)
    begin
        if (ap_sig_bdd_666) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_674)
    begin
        if (ap_sig_bdd_674) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_682)
    begin
        if (ap_sig_bdd_682) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_464)
    begin
        if (ap_sig_bdd_464) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_59)
    begin
        if (ap_sig_bdd_59) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_311)
    begin
        if (ap_sig_bdd_311) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_81)
    begin
        if (ap_sig_bdd_81) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_374)
    begin
        if (ap_sig_bdd_374) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_199)
    begin
        if (ap_sig_bdd_199) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_217)
    begin
        if (ap_sig_bdd_217) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_692)
    begin
        if (ap_sig_bdd_692) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_700)
    begin
        if (ap_sig_bdd_700) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_262)
    begin
        if (ap_sig_bdd_262) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_323)
    begin
        if (ap_sig_bdd_323) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_713)
    begin
        if (ap_sig_bdd_713) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_721)
    begin
        if (ap_sig_bdd_721) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_441)
    begin
        if (ap_sig_bdd_441) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_97)
    begin
        if (ap_sig_bdd_97) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_648)
    begin
        if (ap_sig_bdd_648) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_step_TREADY assign process. --
    ap_sig_ioackin_step_TREADY_assign_proc : process(step_TREADY, ap_reg_ioackin_step_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_step_TREADY)) then 
            ap_sig_ioackin_step_TREADY <= step_TREADY;
        else 
            ap_sig_ioackin_step_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- currentTime_address0 assign process. --
    currentTime_address0_assign_proc : process(tmp_7_reg_758, ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st29_fsm_28, tmp_fu_329_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            currentTime_address0 <= tmp_fu_329_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            currentTime_address0 <= tmp_7_reg_758(11 - 1 downto 0);
        else 
            currentTime_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- currentTime_ce0 assign process. --
    currentTime_ce0_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st33_fsm_32, grp_DetectorNewStep_DetectorPeak_fu_231_ap_done, ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_logic_0 = grp_DetectorNewStep_DetectorPeak_fu_231_ap_done))) or (not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)))) then 
            currentTime_ce0 <= ap_const_logic_1;
        else 
            currentTime_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    currentTime_d0 <= oriValues_TDATA;

    -- currentTime_we0 assign process. --
    currentTime_we0_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st29_fsm_28)
    begin
        if (((not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)))) then 
            currentTime_we0 <= ap_const_logic_1;
        else 
            currentTime_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_302_p2 <= "1" when (j_reg_182 = ap_const_lv12_800) else "0";
    exitcond_fu_335_p2 <= "1" when (i_reg_206 = ap_const_lv11_7FF) else "0";
    gravityOld_to_int_fu_352_p1 <= gravityOld_reg_194;
    grp_DetectorNewStep_DetectorPeak_fu_231_ap_start <= grp_DetectorNewStep_DetectorPeak_fu_231_ap_start_ap_start_reg;
    grp_DetectorNewStep_DetectorPeak_fu_231_newValue <= gravityOld_1_reg_772;
    grp_DetectorNewStep_DetectorPeak_fu_231_oldValue <= gravityOld_reg_194;
    grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start <= grp_DetectorNewStep_Peak_Valley_Thread_fu_218_ap_start_ap_start_reg;
    grp_DetectorNewStep_Peak_Valley_Thread_fu_218_value_r <= reg_294;

    -- grp_fu_250_ce assign process. --
    grp_fu_250_ce_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st36_fsm_35)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((oriValues_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35))) then 
            grp_fu_250_ce <= ap_const_logic_1;
        else 
            grp_fu_250_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_250_opcode assign process. --
    grp_fu_250_opcode_assign_proc : process(ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_250_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            grp_fu_250_opcode <= ap_const_lv2_0;
        else 
            grp_fu_250_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_250_p0 assign process. --
    grp_fu_250_p0_assign_proc : process(peakOfWave, reg_288, reg_294, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_250_p0 <= peakOfWave;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_fu_250_p0 <= reg_294;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_250_p0 <= reg_288;
        else 
            grp_fu_250_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_250_p1 assign process. --
    grp_fu_250_p1_assign_proc : process(valleyOfWave, reg_288, tmp_1_reg_740, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_250_p1 <= valleyOfWave;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_fu_250_p1 <= reg_288;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_250_p1 <= tmp_1_reg_740;
        else 
            grp_fu_250_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_254_ce assign process. --
    grp_fu_254_ce_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((oriValues_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_254_p0 assign process. --
    grp_fu_254_p0_assign_proc : process(oriValues_TDATA, reg_282, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_254_p0 <= oriValues_TDATA;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_254_p0 <= reg_282;
        else 
            grp_fu_254_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_254_p1 assign process. --
    grp_fu_254_p1_assign_proc : process(oriValues_TDATA, reg_282, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_254_p1 <= oriValues_TDATA;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_254_p1 <= reg_282;
        else 
            grp_fu_254_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_258_ce assign process. --
    grp_fu_258_ce_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            grp_fu_258_ce <= ap_const_logic_1;
        else 
            grp_fu_258_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_258_p0 <= oriValues_TDATA;
    grp_fu_258_p1 <= oriValues_TDATA;

    -- grp_fu_266_opcode assign process. --
    grp_fu_266_opcode_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            grp_fu_266_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_266_opcode <= ap_const_lv5_1;
        else 
            grp_fu_266_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_266_p0 assign process. --
    grp_fu_266_p0_assign_proc : process(reg_294, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39, gravityOld_reg_194)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            grp_fu_266_p0 <= reg_294;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_266_p0 <= gravityOld_reg_194;
        else 
            grp_fu_266_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_266_p1 assign process. --
    grp_fu_266_p1_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39, ThreadValue_1_1_fu_120)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            grp_fu_266_p1 <= ap_const_lv32_3FA66666;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            grp_fu_266_p1 <= ThreadValue_1_1_fu_120;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_266_p1 <= ap_const_lv32_0;
        else 
            grp_fu_266_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_273_ce <= ap_const_logic_1;
    grp_fu_273_p0 <= ap_const_lv32_0;
    grp_fu_273_p1 <= reg_294;
    i_2_fu_341_p2 <= std_logic_vector(unsigned(i_reg_206) + unsigned(ap_const_lv11_1));
    isNeg_fu_439_p3 <= sh_assign_fu_433_p2(8 downto 8);
    j_1_fu_308_p2 <= std_logic_vector(unsigned(j_reg_182) + unsigned(ap_const_lv12_1));
    loc_V_1_fu_425_p1 <= p_Val2_1_fu_404_p1(23 - 1 downto 0);
    loc_V_fu_415_p4 <= p_Val2_1_fu_404_p1(30 downto 23);
    notlhs7_fu_594_p2 <= "0" when (tmp_30_fu_562_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_612_p2 <= "0" when (tmp_31_fu_580_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_370_p2 <= "0" when (tmp_26_fu_356_p4 = ap_const_lv8_FF) else "1";
    notrhs7_fu_600_p2 <= "1" when (tmp_18_fu_572_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_618_p2 <= "1" when (tmp_19_fu_590_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_376_p2 <= "1" when (tmp_8_fu_366_p1 = ap_const_lv23_0) else "0";

    -- oriValues_TREADY assign process. --
    oriValues_TREADY_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_302_p2, ap_sig_bdd_88, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_302_p2 = ap_const_lv1_0) and not(ap_sig_bdd_88)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((oriValues_TVALID = ap_const_logic_0))) or (not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) or (not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)))) then 
            oriValues_TREADY <= ap_const_logic_1;
        else 
            oriValues_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_465_p3 <= (ap_const_lv1_1 & loc_V_1_reg_807);
    p_Val2_1_fu_404_p1 <= currentTime_load_reg_787;
    p_Val2_4_fu_520_p3 <= 
        tmp_12_fu_506_p1 when (isNeg_reg_812(0) = '1') else 
        tmp_13_fu_510_p4;
    p_Val2_7_i_i_fu_527_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_fu_520_p3));
    p_Val2_s_fu_533_p3 <= 
        p_Val2_7_i_i_fu_527_p2 when (p_Result_s_reg_802(0) = '1') else 
        p_Val2_4_fu_520_p3;
    sel_tmp2_fu_660_p2 <= (tmp_10_reg_835 and tmp_37_fu_642_p2);
        sh_assign_1_cast_cast_fu_479_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_817),24));

        sh_assign_1_cast_fu_476_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_817),32));

    sh_assign_1_fu_457_p3 <= 
        tmp_5_i_i_cast_fu_453_p1 when (isNeg_fu_439_p3(0) = '1') else 
        sh_assign_fu_433_p2;
    sh_assign_fu_433_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast8_fu_429_p1));
    step2_1_fu_665_p3 <= 
        step2_fu_128 when (sel_tmp2_fu_660_p2(0) = '1') else 
        step2_3_fu_653_p3;
    step2_2_fu_647_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(step2_fu_128));
    step2_3_fu_653_p3 <= 
        step2_2_fu_647_p2 when (tmp_10_reg_835(0) = '1') else 
        step2_fu_128;
    step_TDATA <= step2_fu_128;

    -- step_TVALID assign process. --
    step_TVALID_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, exitcond_fu_335_p2, ap_reg_ioackin_step_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_reg_ioackin_step_TREADY))) then 
            step_TVALID <= ap_const_logic_1;
        else 
            step_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    timeOfThisPeak_2_fu_673_p3 <= 
        p_Val2_s_reg_823 when (tmp_10_reg_835(0) = '1') else 
        timeOfLastPeak_fu_124;
    timeOfThisPeak_fu_678_p3 <= 
        timeOfLastPeak_fu_124 when (sel_tmp2_fu_660_p2(0) = '1') else 
        timeOfThisPeak_2_fu_673_p3;
    tmp_10_fu_552_p2 <= "1" when (signed(tmp_6_fu_547_p2) > signed(ap_const_lv32_F9)) else "0";
    tmp_12_fu_506_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_498_p3),32));
    tmp_13_fu_510_p4 <= tmp_9_i_i_fu_492_p2(54 downto 23);
    tmp_13_to_int_fu_558_p1 <= reg_294;
    tmp_17_fu_498_p3 <= tmp_7_i_i_fu_486_p2(23 downto 23);
    tmp_18_fu_572_p1 <= tmp_13_to_int_fu_558_p1(23 - 1 downto 0);
    tmp_19_fu_590_p1 <= ThreadValue_to_int_fu_576_p1(23 - 1 downto 0);
    tmp_26_fu_356_p4 <= gravityOld_to_int_fu_352_p1(30 downto 23);
    tmp_27_fu_382_p2 <= (notrhs_fu_376_p2 or notlhs_fu_370_p2);
    tmp_29_fu_388_p2 <= (tmp_27_fu_382_p2 and grp_fu_266_p2);
    tmp_30_fu_562_p4 <= tmp_13_to_int_fu_558_p1(30 downto 23);
    tmp_31_fu_580_p4 <= ThreadValue_to_int_fu_576_p1(30 downto 23);
    tmp_32_fu_606_p2 <= (notrhs7_fu_600_p2 or notlhs7_fu_594_p2);
    tmp_33_fu_624_p2 <= (notrhs8_fu_618_p2 or notlhs8_fu_612_p2);
    tmp_34_fu_630_p2 <= (tmp_32_fu_606_p2 and tmp_33_fu_624_p2);
    tmp_36_fu_636_p2 <= (tmp_34_fu_630_p2 and grp_fu_266_p2);
    tmp_37_fu_642_p2 <= (tmp_36_reg_847 xor ap_const_lv1_1);
    tmp_39_fu_685_p2 <= (tmp_32_reg_842 and grp_fu_266_p2);
        tmp_5_i_i_cast_fu_453_p1 <= std_logic_vector(resize(signed(tmp_5_i_i_fu_447_p2),9));

    tmp_5_i_i_fu_447_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_415_p4));
    tmp_6_fu_547_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_823) - unsigned(timeOfLastPeak_fu_124));
    tmp_6_i_i_fu_482_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_476_p1),78));
    tmp_7_fu_347_p1 <= std_logic_vector(resize(unsigned(i_reg_206),64));
    tmp_7_i_i_fu_486_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_465_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_479_p1(24-1 downto 0)))));
    tmp_8_fu_366_p1 <= gravityOld_to_int_fu_352_p1(23 - 1 downto 0);
    tmp_9_i_i_fu_492_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_472_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_482_p1(31-1 downto 0)))));
    tmp_fu_329_p1 <= std_logic_vector(resize(unsigned(j_reg_182),64));
    tmp_i_i_fu_472_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_465_p3),78));
    tmp_i_i_i_cast8_fu_429_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_415_p4),9));

    -- values_address0 assign process. --
    values_address0_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, tmp_7_fu_347_p1, ap_sig_cseq_ST_st29_fsm_28, tmp_fu_329_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            values_address0 <= tmp_fu_329_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            values_address0 <= tmp_7_fu_347_p1(11 - 1 downto 0);
        else 
            values_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- values_ce0 assign process. --
    values_ce0_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st30_fsm_29, exitcond_fu_335_p2, ap_sig_ioackin_step_TREADY, ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((not((ap_const_lv1_0 = exitcond_fu_335_p2)) and (ap_const_logic_0 = ap_sig_ioackin_step_TREADY)))) or (not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)))) then 
            values_ce0 <= ap_const_logic_1;
        else 
            values_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    values_d0 <= tmp_5_reg_745;

    -- values_we0 assign process. --
    values_we0_assign_proc : process(oriValues_TVALID, ap_sig_cseq_ST_st29_fsm_28)
    begin
        if (((not((oriValues_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)))) then 
            values_we0 <= ap_const_logic_1;
        else 
            values_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
