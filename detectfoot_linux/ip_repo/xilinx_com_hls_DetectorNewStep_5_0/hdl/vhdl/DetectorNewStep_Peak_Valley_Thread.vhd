-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DetectorNewStep_Peak_Valley_Thread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    value_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DetectorNewStep_Peak_Valley_Thread is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3E800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000000000000000000000";
    constant ap_const_lv32_41000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000000000000000000000000";
    constant ap_const_lv32_40400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010000000000000000000000";
    constant ap_const_lv32_40E00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000111000000000000000000000";
    constant ap_const_lv32_40800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_4089999A : STD_LOGIC_VECTOR (31 downto 0) := "01000000100010011001100110011010";
    constant ap_const_lv32_3FA66666 : STD_LOGIC_VECTOR (31 downto 0) := "00111111101001100110011001100110";
    constant ap_const_lv32_40133333 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000100110011001100110011";
    constant ap_const_lv32_40533333 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010100110011001100110011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_36 : BOOLEAN;
    signal ThreadValue : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    signal tempCount : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal valueNum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    signal tempValue_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tempValue_ce0 : STD_LOGIC;
    signal tempValue_we0 : STD_LOGIC;
    signal tempValue_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempValue_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_241_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_461 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_74 : BOOLEAN;
    signal tmp_i_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempValue_load_1_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ave_1_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_107 : BOOLEAN;
    signal tmp_10_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal sel_tmp6_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal tmp_23_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempThread_1_fu_390_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempThread_1_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_169 : BOOLEAN;
    signal tmp_8_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_432_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal ave_i_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_126 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_137 : STD_LOGIC_VECTOR (30 downto 0);
    signal tempThread2_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_cast_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ave_1_to_int_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_255_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_265_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_demorgan_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_i_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ave_1_i_fu_363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_383_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_375_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_421_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_159_ce : STD_LOGIC;
    signal grp_fu_164_ce : STD_LOGIC;
    signal grp_fu_170_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_175_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_180_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_185_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_190_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_427 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component DetectorNewStep_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DetectorNewStep_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DetectorNewStep_Peak_Valley_Thread_tempValue IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tempValue_U : component DetectorNewStep_Peak_Valley_Thread_tempValue
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempValue_address0,
        ce0 => tempValue_ce0,
        we0 => tempValue_we0,
        d0 => tempValue_d0,
        q0 => tempValue_q0);

    DetectorNewStep_fadd_32ns_32ns_32_5_full_dsp_U6 : component DetectorNewStep_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_159_p0,
        din1 => grp_fu_159_p1,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp_U7 : component DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_164_p0,
        din1 => grp_fu_164_p1,
        ce => grp_fu_164_ce,
        dout => grp_fu_164_p2);

    DetectorNewStep_fcmp_32ns_32ns_1_1_U8 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_170_p0,
        din1 => grp_fu_170_p1,
        opcode => grp_fu_170_opcode,
        dout => grp_fu_170_p2);

    DetectorNewStep_fcmp_32ns_32ns_1_1_U9 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        opcode => grp_fu_175_opcode,
        dout => grp_fu_175_p2);

    DetectorNewStep_fcmp_32ns_32ns_1_1_U10 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_16_fu_180_p0,
        din1 => tmp_16_fu_180_p1,
        opcode => tmp_16_fu_180_opcode,
        dout => tmp_16_fu_180_p2);

    DetectorNewStep_fcmp_32ns_32ns_1_1_U11 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_18_fu_185_p0,
        din1 => tmp_18_fu_185_p1,
        opcode => tmp_18_fu_185_opcode,
        dout => tmp_18_fu_185_p2);

    DetectorNewStep_fcmp_32ns_32ns_1_1_U12 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_19_fu_190_p0,
        din1 => tmp_19_fu_190_p1,
        opcode => tmp_19_fu_190_opcode,
        dout => tmp_19_fu_190_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                                        ap_return_preg(30 downto 0) <= tempThread2_reg_149(30 downto 0);
                end if; 
            end if;
        end if;
    end process;


    -- ThreadValue assign process. --
    ThreadValue_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    -- ave_i_reg_114 assign process. --
    ave_i_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_209_p2))) then 
                ave_i_reg_114 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                ave_i_reg_114 <= grp_fu_159_p2;
            end if; 
        end if;
    end process;

    -- i_i_reg_126 assign process. --
    i_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_209_p2))) then 
                i_i_reg_126 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                i_i_reg_126 <= i_2_reg_461;
            end if; 
        end if;
    end process;

    -- i_reg_137 assign process. --
    i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                i_reg_137 <= i_1_fu_432_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                i_reg_137 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;

    -- tempThread2_reg_149 assign process. --
    tempThread2_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = tmp_8_fu_401_p2))) then 
                                tempThread2_reg_149(30 downto 0) <= tempThread_1_reg_553(30 downto 0);
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_209_p2)))) then 
                                tempThread2_reg_149(30 downto 0) <= ThreadValue(30 downto 0);
            end if; 
        end if;
    end process;

    -- valueNum assign process. --
    valueNum_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                ave_1_reg_481 <= grp_fu_164_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_461 <= i_2_fu_241_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                sel_tmp6_reg_533 <= sel_tmp6_fu_342_p2;
                tmp_12_reg_527 <= tmp_12_fu_287_p2;
                tmp_25_reg_538 <= tmp_25_fu_348_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_209_p2)))) then
                tempCount <= tmp_7_fu_220_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                    tempThread_1_reg_553(30 downto 0) <= tempThread_1_fu_390_p3(30 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tempValue_load_1_reg_471 <= tempValue_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_10_reg_491 <= tmp_10_fu_281_p2;
                tmp_11_reg_500 <= grp_fu_170_p2;
                tmp_14_reg_505 <= grp_fu_175_p2;
                tmp_16_reg_511 <= tmp_16_fu_180_p2;
                tmp_18_reg_517 <= tmp_18_fu_185_p2;
                tmp_19_reg_522 <= tmp_19_fu_190_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_25_reg_538))) then
                tmp_22_reg_543 <= tmp_22_fu_354_p2;
                tmp_23_reg_548 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    tempThread_1_reg_553(31) <= '0';
    tempThread2_reg_149(31) <= '0';
    ap_return_preg(31) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_i_fu_236_p2, tmp_8_fu_401_p2, tmp_fu_209_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_209_p2)))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                elsif ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_209_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_i_fu_236_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if ((ap_const_lv1_0 = tmp_8_fu_401_p2)) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(tempThread2_reg_149, ap_return_preg, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            ap_return <= tempThread2_reg_149;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_107 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_169 assign process. --
    ap_sig_bdd_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_169 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_36 assign process. --
    ap_sig_bdd_36_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_36 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_427 assign process. --
    ap_sig_bdd_427_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_427 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_74 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_107)
    begin
        if (ap_sig_bdd_107) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_169)
    begin
        if (ap_sig_bdd_169) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_427)
    begin
        if (ap_sig_bdd_427) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_36)
    begin
        if (ap_sig_bdd_36) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_74)
    begin
        if (ap_sig_bdd_74) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    ave_1_i_fu_363_p3 <= 
        ap_const_lv32_4089999A when (tmp_12_reg_527(0) = '1') else 
        ap_const_lv32_40000000;
    ave_1_to_int_fu_252_p1 <= ave_1_reg_481;
    grp_fu_159_ce <= ap_const_logic_1;
    grp_fu_159_p0 <= ave_i_reg_114;
    grp_fu_159_p1 <= tempValue_load_1_reg_471;
    grp_fu_164_ce <= ap_const_logic_1;
    grp_fu_164_p0 <= ave_i_reg_114;
    grp_fu_164_p1 <= ap_const_lv32_3E800000;
    grp_fu_170_opcode <= ap_const_lv5_3;
    grp_fu_170_p0 <= ave_1_reg_481;

    -- grp_fu_170_p1 assign process. --
    grp_fu_170_p1_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_170_p1 <= ap_const_lv32_40400000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_fu_170_p1 <= ap_const_lv32_41000000;
        else 
            grp_fu_170_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_175_opcode assign process. --
    grp_fu_175_opcode_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, tmp_25_reg_538, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_25_reg_538))) then 
            grp_fu_175_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_fu_175_opcode <= ap_const_lv5_3;
        else 
            grp_fu_175_opcode <= "XXXXX";
        end if; 
    end process;

    grp_fu_175_p0 <= ave_1_reg_481;

    -- grp_fu_175_p1 assign process. --
    grp_fu_175_p1_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_175_p1 <= ap_const_lv32_40800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_fu_175_p1 <= ap_const_lv32_40E00000;
        else 
            grp_fu_175_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_432_p2 <= std_logic_vector(unsigned(i_reg_137) + unsigned(ap_const_lv31_1));
    i_2_fu_241_p2 <= std_logic_vector(unsigned(i_i_reg_126) + unsigned(ap_const_lv31_1));
    i_cast_fu_397_p1 <= std_logic_vector(resize(unsigned(i_reg_137),32));
    i_i_cast_fu_232_p1 <= std_logic_vector(resize(unsigned(i_i_reg_126),32));
    notlhs_fu_269_p2 <= "0" when (tmp_5_fu_255_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_275_p2 <= "1" when (tmp_6_fu_265_p1 = ap_const_lv23_0) else "0";
    or_cond2_i_fu_359_p2 <= (tmp_22_reg_543 and tmp_23_reg_548);
    sel_tmp1_fu_375_p3 <= 
        ave_1_i_fu_363_p3 when (tmp_24_fu_370_p2(0) = '1') else 
        ap_const_lv32_3FA66666;
    sel_tmp2_fu_315_p2 <= (tmp8_fu_309_p2 and tmp_14_reg_505);
    sel_tmp3_fu_383_p3 <= 
        ap_const_lv32_40133333 when (sel_tmp6_reg_533(0) = '1') else 
        ap_const_lv32_40533333;
    sel_tmp4_demorgan_fu_320_p2 <= (tmp_15_fu_297_p2 and tmp_16_reg_511);
    sel_tmp4_fu_325_p2 <= (sel_tmp4_demorgan_fu_320_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_342_p2 <= (tmp1_fu_337_p2 and tmp9_fu_331_p2);
    tempThread_1_fu_390_p3 <= 
        sel_tmp3_fu_383_p3 when (tmp_25_reg_538(0) = '1') else 
        sel_tmp1_fu_375_p3;

    -- tempValue_address0 assign process. --
    tempValue_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st16_fsm_15, tmp_8_fu_401_p2, ap_sig_cseq_ST_st17_fsm_16, tmp_s_fu_215_p1, tmp_9_i_fu_247_p1, tmp_9_fu_406_p1, tmp_4_fu_416_p1, tmp_2_fu_427_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            tempValue_address0 <= tmp_2_fu_427_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = tmp_8_fu_401_p2))) then 
            tempValue_address0 <= tmp_4_fu_416_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            tempValue_address0 <= tmp_s_fu_215_p1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = tmp_8_fu_401_p2)))) then 
            tempValue_address0 <= tmp_9_fu_406_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempValue_address0 <= tmp_9_i_fu_247_p1(2 - 1 downto 0);
        else 
            tempValue_address0 <= "XX";
        end if; 
    end process;


    -- tempValue_ce0 assign process. --
    tempValue_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st16_fsm_15, tmp_8_fu_401_p2, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = tmp_8_fu_401_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = tmp_8_fu_401_p2)))) then 
            tempValue_ce0 <= ap_const_logic_1;
        else 
            tempValue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tempValue_d0 assign process. --
    tempValue_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, value_r, tempValue_q0, ap_sig_cseq_ST_st16_fsm_15, tmp_8_fu_401_p2, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            tempValue_d0 <= tempValue_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = tmp_8_fu_401_p2)))) then 
            tempValue_d0 <= value_r;
        else 
            tempValue_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- tempValue_we0 assign process. --
    tempValue_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st16_fsm_15, tmp_8_fu_401_p2, ap_sig_cseq_ST_st17_fsm_16, tmp_fu_209_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_209_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = tmp_8_fu_401_p2)))) then 
            tempValue_we0 <= ap_const_logic_1;
        else 
            tempValue_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_337_p2 <= (tmp_20_fu_305_p2 and tmp_18_reg_517);
    tmp8_fu_309_p2 <= (tmp_17_fu_301_p2 and tmp_13_fu_291_p2);
    tmp9_fu_331_p2 <= (tmp_13_fu_291_p2 and sel_tmp4_fu_325_p2);
    tmp_10_fu_281_p2 <= (notrhs_fu_275_p2 or notlhs_fu_269_p2);
    tmp_12_fu_287_p2 <= (tmp_10_reg_491 and tmp_11_reg_500);
    tmp_13_fu_291_p2 <= (tmp_12_fu_287_p2 xor ap_const_lv1_1);
    tmp_15_fu_297_p2 <= (tmp_10_reg_491 and tmp_14_reg_505);
    tmp_16_fu_180_opcode <= ap_const_lv5_4;
    tmp_16_fu_180_p0 <= ave_1_reg_481;
    tmp_16_fu_180_p1 <= ap_const_lv32_41000000;
    tmp_17_fu_301_p2 <= (tmp_10_reg_491 and tmp_16_reg_511);
    tmp_18_fu_185_opcode <= ap_const_lv5_3;
    tmp_18_fu_185_p0 <= ave_1_reg_481;
    tmp_18_fu_185_p1 <= ap_const_lv32_40800000;
    tmp_19_fu_190_opcode <= ap_const_lv5_4;
    tmp_19_fu_190_p0 <= ave_1_reg_481;
    tmp_19_fu_190_p1 <= ap_const_lv32_40E00000;
    tmp_1_fu_421_p2 <= std_logic_vector(unsigned(i_reg_137) + unsigned(ap_const_lv31_7FFFFFFF));
    tmp_20_fu_305_p2 <= (tmp_10_reg_491 and tmp_19_reg_522);
    tmp_22_fu_354_p2 <= (tmp_10_reg_491 and grp_fu_170_p2);
    tmp_24_fu_370_p2 <= (tmp_12_reg_527 or or_cond2_i_fu_359_p2);
    tmp_25_fu_348_p2 <= (sel_tmp6_fu_342_p2 or sel_tmp2_fu_315_p2);
    tmp_2_fu_427_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_421_p2),64));
    tmp_3_fu_411_p2 <= std_logic_vector(unsigned(valueNum) + unsigned(ap_const_lv32_FFFFFFFF));
        tmp_4_fu_416_p1 <= std_logic_vector(resize(signed(tmp_3_fu_411_p2),64));

    tmp_5_fu_255_p4 <= ave_1_to_int_fu_252_p1(30 downto 23);
    tmp_6_fu_265_p1 <= ave_1_to_int_fu_252_p1(23 - 1 downto 0);
    tmp_7_fu_220_p2 <= std_logic_vector(unsigned(tempCount) + unsigned(ap_const_lv32_1));
    tmp_8_fu_401_p2 <= "1" when (signed(i_cast_fu_397_p1) < signed(valueNum)) else "0";
    tmp_9_fu_406_p1 <= std_logic_vector(resize(unsigned(i_reg_137),64));
    tmp_9_i_fu_247_p1 <= std_logic_vector(resize(unsigned(i_i_reg_126),64));
    tmp_fu_209_p2 <= "1" when (signed(tempCount) < signed(valueNum)) else "0";
    tmp_i_fu_236_p2 <= "1" when (signed(i_i_cast_fu_232_p1) < signed(valueNum)) else "0";
        tmp_s_fu_215_p1 <= std_logic_vector(resize(signed(tempCount),64));

end behav;
