-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DetectorNewStep_DetectorPeak is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    newValue : IN STD_LOGIC_VECTOR (31 downto 0);
    oldValue : IN STD_LOGIC_VECTOR (31 downto 0);
    peakOfWave : OUT STD_LOGIC_VECTOR (31 downto 0);
    peakOfWave_ap_vld : OUT STD_LOGIC;
    valleyOfWave : OUT STD_LOGIC_VECTOR (31 downto 0);
    valleyOfWave_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of DetectorNewStep_DetectorPeak is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_41200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal isDirectionUp : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal continueUpCount : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal continueUpFormerCount : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal isDirectionUp_load_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_phi_fu_59_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_56 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_phi_fu_71_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_66 : BOOLEAN;
    signal demorgan_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_83_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_83_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_89_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_89_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_99_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal newValue_to_int_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal oldValue_to_int_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_119_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_129_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_137_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_147_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_251_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_83_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_45_fu_89_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_41 : BOOLEAN;

    component DetectorNewStep_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    DetectorNewStep_fcmp_32ns_32ns_1_1_U0 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_43_fu_83_p0,
        din1 => tmp_43_fu_83_p1,
        opcode => tmp_43_fu_83_opcode,
        dout => tmp_43_fu_83_p2);

    DetectorNewStep_fcmp_32ns_32ns_1_1_U1 : component DetectorNewStep_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_45_fu_89_p0,
        din1 => tmp_45_fu_89_p1,
        opcode => tmp_45_fu_89_opcode,
        dout => tmp_45_fu_89_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_return_preg <= p_0_phi_fu_71_p6;
                end if; 
            end if;
        end if;
    end process;


    -- continueUpCount assign process. --
    continueUpCount_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_41) then
                if (not((ap_const_lv1_0 = tmp_44_fu_193_p2))) then 
                    continueUpCount <= tmp_1_fu_223_p2;
                elsif ((ap_const_lv1_0 = tmp_44_fu_193_p2)) then 
                    continueUpCount <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    -- isDirectionUp assign process. --
    isDirectionUp_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_41) then
                if (not((ap_const_lv1_0 = tmp_44_fu_193_p2))) then 
                    isDirectionUp(0) <= '1';
                elsif ((ap_const_lv1_0 = tmp_44_fu_193_p2)) then 
                    isDirectionUp(0) <= '0';
                end if;
            end if; 
        end if;
    end process;

    -- tmp_2_reg_56 assign process. --
    tmp_2_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_41) then
                if (not((ap_const_lv1_0 = tmp_44_fu_193_p2))) then 
                    tmp_2_reg_56 <= ap_const_lv1_1;
                elsif ((ap_const_lv1_0 = tmp_44_fu_193_p2)) then 
                    tmp_2_reg_56 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_44_fu_193_p2))) then
                continueUpFormerCount <= continueUpCount;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    isDirectionUp_load_reg_300(0) <= isDirectionUp(0);
                or_cond_reg_308 <= or_cond_fu_235_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_235_p2 = ap_const_lv1_0))) then
                tmp_46_reg_312 <= tmp_46_fu_241_p2;
            end if;
        end if;
    end process;
    isDirectionUp(31 downto 1) <= "0000000000000000000000000000000";
    isDirectionUp_load_reg_300(31 downto 1) <= "0000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(p_0_phi_fu_71_p6, ap_sig_cseq_ST_st2_fsm_1, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            ap_return <= p_0_phi_fu_71_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_41 assign process. --
    ap_sig_bdd_41_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
                ap_sig_bdd_41 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_66 assign process. --
    ap_sig_bdd_66_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_66 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_66)
    begin
        if (ap_sig_bdd_66) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    demorgan_fu_283_p2 <= (tmp_2_reg_56 and grp_fu_99_p2);

    -- grp_fu_99_p0 assign process. --
    grp_fu_99_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, isDirectionUp, isDirectionUp_load_reg_300, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_99_p0 <= isDirectionUp_load_reg_300;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_99_p0 <= isDirectionUp;
        else 
            grp_fu_99_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_99_p2 <= "1" when (grp_fu_99_p0 = ap_const_lv32_0) else "0";
    icmp_fu_261_p2 <= "1" when (signed(tmp_22_fu_251_p4) < signed(ap_const_lv31_1)) else "0";
    newValue_to_int_fu_115_p1 <= newValue;
    notlhs2_fu_169_p2 <= "0" when (tmp_s_fu_137_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_151_p2 <= "0" when (tmp_fu_119_p4 = ap_const_lv8_FF) else "1";
    notrhs3_fu_175_p2 <= "1" when (tmp_21_fu_147_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_157_p2 <= "1" when (tmp_20_fu_129_p1 = ap_const_lv23_0) else "0";
    oldValue_to_int_fu_133_p1 <= oldValue;
    or_cond2_fu_272_p2 <= (icmp_fu_261_p2 and tmp_47_fu_267_p2);
    or_cond_fu_235_p2 <= (tmp_2_phi_fu_59_p4 or grp_fu_99_p2);

    -- p_0_phi_fu_71_p6 assign process. --
    p_0_phi_fu_71_p6_assign_proc : process(or_cond_reg_308, ap_sig_cseq_ST_st2_fsm_1, demorgan_fu_283_p2, or_cond2_fu_272_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_308 = ap_const_lv1_0) and (ap_const_lv1_0 = or_cond2_fu_272_p2))) then 
            p_0_phi_fu_71_p6 <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((not((or_cond_reg_308 = ap_const_lv1_0)) and not((ap_const_lv1_0 = demorgan_fu_283_p2))) or (not((ap_const_lv1_0 = demorgan_fu_283_p2)) and not((ap_const_lv1_0 = or_cond2_fu_272_p2))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((not((or_cond_reg_308 = ap_const_lv1_0)) and (ap_const_lv1_0 = demorgan_fu_283_p2)) or ((ap_const_lv1_0 = demorgan_fu_283_p2) and not((ap_const_lv1_0 = or_cond2_fu_272_p2))))))) then 
            p_0_phi_fu_71_p6 <= ap_const_lv1_0;
        else 
            p_0_phi_fu_71_p6 <= "X";
        end if; 
    end process;

    peakOfWave <= oldValue;

    -- peakOfWave_ap_vld assign process. --
    peakOfWave_ap_vld_assign_proc : process(or_cond_reg_308, ap_sig_cseq_ST_st2_fsm_1, or_cond2_fu_272_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (or_cond_reg_308 = ap_const_lv1_0) and (ap_const_lv1_0 = or_cond2_fu_272_p2))) then 
            peakOfWave_ap_vld <= ap_const_logic_1;
        else 
            peakOfWave_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_223_p2 <= std_logic_vector(unsigned(continueUpCount) + unsigned(ap_const_lv32_1));
    tmp_20_fu_129_p1 <= newValue_to_int_fu_115_p1(23 - 1 downto 0);
    tmp_21_fu_147_p1 <= oldValue_to_int_fu_133_p1(23 - 1 downto 0);
    tmp_22_fu_251_p4 <= continueUpFormerCount(31 downto 1);

    -- tmp_2_phi_fu_59_p4 assign process. --
    tmp_2_phi_fu_59_p4_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, tmp_44_fu_193_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
            if (not((ap_const_lv1_0 = tmp_44_fu_193_p2))) then 
                tmp_2_phi_fu_59_p4 <= ap_const_lv1_1;
            elsif ((ap_const_lv1_0 = tmp_44_fu_193_p2)) then 
                tmp_2_phi_fu_59_p4 <= ap_const_lv1_0;
            else 
                tmp_2_phi_fu_59_p4 <= "X";
            end if;
        else 
            tmp_2_phi_fu_59_p4 <= "X";
        end if; 
    end process;

    tmp_40_fu_163_p2 <= (notrhs_fu_157_p2 or notlhs_fu_151_p2);
    tmp_41_fu_181_p2 <= (notrhs3_fu_175_p2 or notlhs2_fu_169_p2);
    tmp_42_fu_187_p2 <= (tmp_40_fu_163_p2 and tmp_41_fu_181_p2);
    tmp_43_fu_83_opcode <= ap_const_lv5_3;
    tmp_43_fu_83_p0 <= newValue;
    tmp_43_fu_83_p1 <= oldValue;
    tmp_44_fu_193_p2 <= (tmp_42_fu_187_p2 and tmp_43_fu_83_p2);
    tmp_45_fu_89_opcode <= ap_const_lv5_3;
    tmp_45_fu_89_p0 <= oldValue;
    tmp_45_fu_89_p1 <= ap_const_lv32_41200000;
    tmp_46_fu_241_p2 <= (tmp_41_fu_181_p2 and tmp_45_fu_89_p2);
    tmp_47_fu_267_p2 <= (tmp_46_reg_312 xor ap_const_lv1_1);
    tmp_fu_119_p4 <= newValue_to_int_fu_115_p1(30 downto 23);
    tmp_s_fu_137_p4 <= oldValue_to_int_fu_133_p1(30 downto 23);
    valleyOfWave <= oldValue;

    -- valleyOfWave_ap_vld assign process. --
    valleyOfWave_ap_vld_assign_proc : process(or_cond_reg_308, ap_sig_cseq_ST_st2_fsm_1, demorgan_fu_283_p2, or_cond2_fu_272_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and ((not((or_cond_reg_308 = ap_const_lv1_0)) and not((ap_const_lv1_0 = demorgan_fu_283_p2))) or (not((ap_const_lv1_0 = demorgan_fu_283_p2)) and not((ap_const_lv1_0 = or_cond2_fu_272_p2)))))) then 
            valleyOfWave_ap_vld <= ap_const_logic_1;
        else 
            valleyOfWave_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
