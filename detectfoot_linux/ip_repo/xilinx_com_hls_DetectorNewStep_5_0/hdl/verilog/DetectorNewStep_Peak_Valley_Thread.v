// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DetectorNewStep_Peak_Valley_Thread (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        value_r,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 18'b1;
parameter    ap_ST_st2_fsm_1 = 18'b10;
parameter    ap_ST_st3_fsm_2 = 18'b100;
parameter    ap_ST_st4_fsm_3 = 18'b1000;
parameter    ap_ST_st5_fsm_4 = 18'b10000;
parameter    ap_ST_st6_fsm_5 = 18'b100000;
parameter    ap_ST_st7_fsm_6 = 18'b1000000;
parameter    ap_ST_st8_fsm_7 = 18'b10000000;
parameter    ap_ST_st9_fsm_8 = 18'b100000000;
parameter    ap_ST_st10_fsm_9 = 18'b1000000000;
parameter    ap_ST_st11_fsm_10 = 18'b10000000000;
parameter    ap_ST_st12_fsm_11 = 18'b100000000000;
parameter    ap_ST_st13_fsm_12 = 18'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 18'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 18'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 18'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 18'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 18'b100000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_40000000 = 32'b1000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_3E800000 = 32'b111110100000000000000000000000;
parameter    ap_const_lv32_41000000 = 32'b1000001000000000000000000000000;
parameter    ap_const_lv32_40400000 = 32'b1000000010000000000000000000000;
parameter    ap_const_lv32_40E00000 = 32'b1000000111000000000000000000000;
parameter    ap_const_lv32_40800000 = 32'b1000000100000000000000000000000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_4089999A = 32'b1000000100010011001100110011010;
parameter    ap_const_lv32_3FA66666 = 32'b111111101001100110011001100110;
parameter    ap_const_lv32_40133333 = 32'b1000000000100110011001100110011;
parameter    ap_const_lv32_40533333 = 32'b1000000010100110011001100110011;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv31_7FFFFFFF = 31'b1111111111111111111111111111111;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] value_r;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm = 18'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_36;
reg   [31:0] ThreadValue = 32'b1000000000000000000000000000000;
reg   [31:0] tempCount = 32'b00000000000000000000000000000000;
reg   [31:0] valueNum = 32'b100;
reg   [1:0] tempValue_address0;
reg    tempValue_ce0;
reg    tempValue_we0;
reg   [31:0] tempValue_d0;
wire   [31:0] tempValue_q0;
wire   [30:0] i_2_fu_241_p2;
reg   [30:0] i_2_reg_461;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_74;
wire   [0:0] tmp_i_fu_236_p2;
reg   [31:0] tempValue_load_1_reg_471;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_89;
wire   [31:0] grp_fu_159_p2;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_98;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] ave_1_reg_481;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_107;
wire   [0:0] tmp_10_fu_281_p2;
reg   [0:0] tmp_10_reg_491;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_116;
wire   [0:0] grp_fu_170_p2;
reg   [0:0] tmp_11_reg_500;
wire   [0:0] grp_fu_175_p2;
reg   [0:0] tmp_14_reg_505;
wire   [0:0] tmp_16_fu_180_p2;
reg   [0:0] tmp_16_reg_511;
wire   [0:0] tmp_18_fu_185_p2;
reg   [0:0] tmp_18_reg_517;
wire   [0:0] tmp_19_fu_190_p2;
reg   [0:0] tmp_19_reg_522;
wire   [0:0] tmp_12_fu_287_p2;
reg   [0:0] tmp_12_reg_527;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_135;
wire   [0:0] sel_tmp6_fu_342_p2;
reg   [0:0] sel_tmp6_reg_533;
wire   [0:0] tmp_25_fu_348_p2;
reg   [0:0] tmp_25_reg_538;
wire   [0:0] tmp_22_fu_354_p2;
reg   [0:0] tmp_22_reg_543;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_148;
reg   [0:0] tmp_23_reg_548;
wire   [31:0] tempThread_1_fu_390_p3;
reg   [31:0] tempThread_1_reg_553;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_160;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_169;
wire   [0:0] tmp_8_fu_401_p2;
wire   [30:0] i_1_fu_432_p2;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_182;
reg   [31:0] ave_i_reg_114;
wire   [0:0] tmp_fu_209_p2;
reg   [30:0] i_i_reg_126;
reg   [30:0] i_reg_137;
reg   [31:0] tempThread2_reg_149;
wire  signed [63:0] tmp_s_fu_215_p1;
wire   [63:0] tmp_9_i_fu_247_p1;
wire   [63:0] tmp_9_fu_406_p1;
wire  signed [63:0] tmp_4_fu_416_p1;
wire   [63:0] tmp_2_fu_427_p1;
wire   [31:0] tmp_7_fu_220_p2;
wire   [31:0] grp_fu_159_p0;
wire   [31:0] grp_fu_159_p1;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_228;
wire   [31:0] grp_fu_164_p0;
wire   [31:0] grp_fu_164_p1;
wire   [31:0] grp_fu_170_p0;
reg   [31:0] grp_fu_170_p1;
wire   [31:0] grp_fu_175_p0;
reg   [31:0] grp_fu_175_p1;
wire   [31:0] tmp_16_fu_180_p0;
wire   [31:0] tmp_16_fu_180_p1;
wire   [31:0] tmp_18_fu_185_p0;
wire   [31:0] tmp_18_fu_185_p1;
wire   [31:0] tmp_19_fu_190_p0;
wire   [31:0] tmp_19_fu_190_p1;
wire   [31:0] i_i_cast_fu_232_p1;
wire   [31:0] ave_1_to_int_fu_252_p1;
wire   [7:0] tmp_5_fu_255_p4;
wire   [22:0] tmp_6_fu_265_p1;
wire   [0:0] notrhs_fu_275_p2;
wire   [0:0] notlhs_fu_269_p2;
wire   [0:0] tmp_17_fu_301_p2;
wire   [0:0] tmp_13_fu_291_p2;
wire   [0:0] tmp8_fu_309_p2;
wire   [0:0] tmp_15_fu_297_p2;
wire   [0:0] sel_tmp4_demorgan_fu_320_p2;
wire   [0:0] sel_tmp4_fu_325_p2;
wire   [0:0] tmp_20_fu_305_p2;
wire   [0:0] tmp1_fu_337_p2;
wire   [0:0] tmp9_fu_331_p2;
wire   [0:0] sel_tmp2_fu_315_p2;
wire   [0:0] or_cond2_i_fu_359_p2;
wire   [0:0] tmp_24_fu_370_p2;
wire   [31:0] ave_1_i_fu_363_p3;
wire   [31:0] sel_tmp3_fu_383_p3;
wire   [31:0] sel_tmp1_fu_375_p3;
wire   [31:0] i_cast_fu_397_p1;
wire   [31:0] tmp_3_fu_411_p2;
wire   [30:0] tmp_1_fu_421_p2;
wire    grp_fu_159_ce;
wire    grp_fu_164_ce;
wire   [4:0] grp_fu_170_opcode;
reg   [4:0] grp_fu_175_opcode;
wire   [4:0] tmp_16_fu_180_opcode;
wire   [4:0] tmp_18_fu_185_opcode;
wire   [4:0] tmp_19_fu_190_opcode;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_427;
reg   [17:0] ap_NS_fsm;


DetectorNewStep_Peak_Valley_Thread_tempValue #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
tempValue_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( tempValue_address0 ),
    .ce0( tempValue_ce0 ),
    .we0( tempValue_we0 ),
    .d0( tempValue_d0 ),
    .q0( tempValue_q0 )
);

DetectorNewStep_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DetectorNewStep_fadd_32ns_32ns_32_5_full_dsp_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_159_p0 ),
    .din1( grp_fu_159_p1 ),
    .ce( grp_fu_159_ce ),
    .dout( grp_fu_159_p2 )
);

DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DetectorNewStep_fmul_32ns_32ns_32_4_max_dsp_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_164_p0 ),
    .din1( grp_fu_164_p1 ),
    .ce( grp_fu_164_ce ),
    .dout( grp_fu_164_p2 )
);

DetectorNewStep_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DetectorNewStep_fcmp_32ns_32ns_1_1_U8(
    .din0( grp_fu_170_p0 ),
    .din1( grp_fu_170_p1 ),
    .opcode( grp_fu_170_opcode ),
    .dout( grp_fu_170_p2 )
);

DetectorNewStep_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DetectorNewStep_fcmp_32ns_32ns_1_1_U9(
    .din0( grp_fu_175_p0 ),
    .din1( grp_fu_175_p1 ),
    .opcode( grp_fu_175_opcode ),
    .dout( grp_fu_175_p2 )
);

DetectorNewStep_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DetectorNewStep_fcmp_32ns_32ns_1_1_U10(
    .din0( tmp_16_fu_180_p0 ),
    .din1( tmp_16_fu_180_p1 ),
    .opcode( tmp_16_fu_180_opcode ),
    .dout( tmp_16_fu_180_p2 )
);

DetectorNewStep_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DetectorNewStep_fcmp_32ns_32ns_1_1_U11(
    .din0( tmp_18_fu_185_p0 ),
    .din1( tmp_18_fu_185_p1 ),
    .opcode( tmp_18_fu_185_opcode ),
    .dout( tmp_18_fu_185_p2 )
);

DetectorNewStep_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DetectorNewStep_fcmp_32ns_32ns_1_1_U12(
    .din0( tmp_19_fu_190_p0 ),
    .din1( tmp_19_fu_190_p1 ),
    .opcode( tmp_19_fu_190_opcode ),
    .dout( tmp_19_fu_190_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
                        ap_return_preg[30 : 0] <= tempThread2_reg_149[30 : 0];
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_209_p2))) begin
        ave_i_reg_114 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ave_i_reg_114 <= grp_fu_159_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_209_p2))) begin
        i_i_reg_126 <= ap_const_lv31_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        i_i_reg_126 <= i_2_reg_461;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        i_reg_137 <= i_1_fu_432_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        i_reg_137 <= ap_const_lv31_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & (ap_const_lv1_0 == tmp_8_fu_401_p2))) begin
                tempThread2_reg_149[30 : 0] <= tempThread_1_reg_553[30 : 0];
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_209_p2))) begin
                tempThread2_reg_149[30 : 0] <= ThreadValue[30 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        ave_1_reg_481 <= grp_fu_164_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_461 <= i_2_fu_241_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        sel_tmp6_reg_533 <= sel_tmp6_fu_342_p2;
        tmp_12_reg_527 <= tmp_12_fu_287_p2;
        tmp_25_reg_538 <= tmp_25_fu_348_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_209_p2))) begin
        tempCount <= tmp_7_fu_220_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        tempThread_1_reg_553[30 : 0] <= tempThread_1_fu_390_p3[30 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tempValue_load_1_reg_471 <= tempValue_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        tmp_10_reg_491 <= tmp_10_fu_281_p2;
        tmp_11_reg_500 <= grp_fu_170_p2;
        tmp_14_reg_505 <= grp_fu_175_p2;
        tmp_16_reg_511 <= tmp_16_fu_180_p2;
        tmp_18_reg_517 <= tmp_18_fu_185_p2;
        tmp_19_reg_522 <= tmp_19_fu_190_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & (ap_const_lv1_0 == tmp_25_reg_538))) begin
        tmp_22_reg_543 <= tmp_22_fu_354_p2;
        tmp_23_reg_548 <= grp_fu_175_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st18_fsm_17)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st18_fsm_17)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (tempThread2_reg_149 or ap_return_preg or ap_sig_cseq_ST_st18_fsm_17)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        ap_return = tempThread2_reg_149;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_107)
begin
    if (ap_sig_bdd_107) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_116)
begin
    if (ap_sig_bdd_116) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_135)
begin
    if (ap_sig_bdd_135) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_148)
begin
    if (ap_sig_bdd_148) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_160)
begin
    if (ap_sig_bdd_160) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_169)
begin
    if (ap_sig_bdd_169) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_182)
begin
    if (ap_sig_bdd_182) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st18_fsm_17 assign process. ///
always @ (ap_sig_bdd_427)
begin
    if (ap_sig_bdd_427) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_36)
begin
    if (ap_sig_bdd_36) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_74)
begin
    if (ap_sig_bdd_74) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_89)
begin
    if (ap_sig_bdd_89) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_228)
begin
    if (ap_sig_bdd_228) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_98)
begin
    if (ap_sig_bdd_98) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// grp_fu_170_p1 assign process. ///
always @ (ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        grp_fu_170_p1 = ap_const_lv32_40400000;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_fu_170_p1 = ap_const_lv32_41000000;
    end else begin
        grp_fu_170_p1 = 'bx;
    end
end

/// grp_fu_175_opcode assign process. ///
always @ (ap_sig_cseq_ST_st12_fsm_11 or tmp_25_reg_538 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & (ap_const_lv1_0 == tmp_25_reg_538))) begin
        grp_fu_175_opcode = ap_const_lv5_4;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_fu_175_opcode = ap_const_lv5_3;
    end else begin
        grp_fu_175_opcode = 'bx;
    end
end

/// grp_fu_175_p1 assign process. ///
always @ (ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        grp_fu_175_p1 = ap_const_lv32_40800000;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_fu_175_p1 = ap_const_lv32_40E00000;
    end else begin
        grp_fu_175_p1 = 'bx;
    end
end

/// tempValue_address0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st16_fsm_15 or tmp_8_fu_401_p2 or ap_sig_cseq_ST_st17_fsm_16 or tmp_s_fu_215_p1 or tmp_9_i_fu_247_p1 or tmp_9_fu_406_p1 or tmp_4_fu_416_p1 or tmp_2_fu_427_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        tempValue_address0 = tmp_2_fu_427_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & (ap_const_lv1_0 == tmp_8_fu_401_p2))) begin
        tempValue_address0 = tmp_4_fu_416_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        tempValue_address0 = tmp_s_fu_215_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & ~(ap_const_lv1_0 == tmp_8_fu_401_p2))) begin
        tempValue_address0 = tmp_9_fu_406_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tempValue_address0 = tmp_9_i_fu_247_p1;
    end else begin
        tempValue_address0 = 'bx;
    end
end

/// tempValue_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st16_fsm_15 or tmp_8_fu_401_p2 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & ~(ap_const_lv1_0 == tmp_8_fu_401_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) | ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & (ap_const_lv1_0 == tmp_8_fu_401_p2)))) begin
        tempValue_ce0 = ap_const_logic_1;
    end else begin
        tempValue_ce0 = ap_const_logic_0;
    end
end

/// tempValue_d0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or value_r or tempValue_q0 or ap_sig_cseq_ST_st16_fsm_15 or tmp_8_fu_401_p2 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        tempValue_d0 = tempValue_q0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & (ap_const_lv1_0 == tmp_8_fu_401_p2)))) begin
        tempValue_d0 = value_r;
    end else begin
        tempValue_d0 = 'bx;
    end
end

/// tempValue_we0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st16_fsm_15 or tmp_8_fu_401_p2 or ap_sig_cseq_ST_st17_fsm_16 or tmp_fu_209_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_209_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & (ap_const_lv1_0 == tmp_8_fu_401_p2)))) begin
        tempValue_we0 = ap_const_logic_1;
    end else begin
        tempValue_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_i_fu_236_p2 or tmp_8_fu_401_p2 or tmp_fu_209_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_209_p2))) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else if ((~(ap_start == ap_const_logic_0) & (ap_const_lv1_0 == tmp_fu_209_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((tmp_i_fu_236_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            if ((ap_const_lv1_0 == tmp_8_fu_401_p2)) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_107 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_107 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_116 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_116 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_135 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_135 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_148 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_148 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_160 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_160 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_169 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_169 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_182 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_182 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_228 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_228 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_36 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_36 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_427 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_427 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_74 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_89 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_89 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_98 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_98 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end
assign ave_1_i_fu_363_p3 = ((tmp_12_reg_527[0:0]===1'b1)? ap_const_lv32_4089999A: ap_const_lv32_40000000);
assign ave_1_to_int_fu_252_p1 = ave_1_reg_481;
assign grp_fu_159_ce = ap_const_logic_1;
assign grp_fu_159_p0 = ave_i_reg_114;
assign grp_fu_159_p1 = tempValue_load_1_reg_471;
assign grp_fu_164_ce = ap_const_logic_1;
assign grp_fu_164_p0 = ave_i_reg_114;
assign grp_fu_164_p1 = ap_const_lv32_3E800000;
assign grp_fu_170_opcode = ap_const_lv5_3;
assign grp_fu_170_p0 = ave_1_reg_481;
assign grp_fu_175_p0 = ave_1_reg_481;
assign i_1_fu_432_p2 = (i_reg_137 + ap_const_lv31_1);
assign i_2_fu_241_p2 = (i_i_reg_126 + ap_const_lv31_1);
assign i_cast_fu_397_p1 = i_reg_137;
assign i_i_cast_fu_232_p1 = i_i_reg_126;
assign notlhs_fu_269_p2 = (tmp_5_fu_255_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notrhs_fu_275_p2 = (tmp_6_fu_265_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign or_cond2_i_fu_359_p2 = (tmp_22_reg_543 & tmp_23_reg_548);
assign sel_tmp1_fu_375_p3 = ((tmp_24_fu_370_p2[0:0]===1'b1)? ave_1_i_fu_363_p3: ap_const_lv32_3FA66666);
assign sel_tmp2_fu_315_p2 = (tmp8_fu_309_p2 & tmp_14_reg_505);
assign sel_tmp3_fu_383_p3 = ((sel_tmp6_reg_533[0:0]===1'b1)? ap_const_lv32_40133333: ap_const_lv32_40533333);
assign sel_tmp4_demorgan_fu_320_p2 = (tmp_15_fu_297_p2 & tmp_16_reg_511);
assign sel_tmp4_fu_325_p2 = (sel_tmp4_demorgan_fu_320_p2 ^ ap_const_lv1_1);
assign sel_tmp6_fu_342_p2 = (tmp1_fu_337_p2 & tmp9_fu_331_p2);
assign tempThread_1_fu_390_p3 = ((tmp_25_reg_538[0:0]===1'b1)? sel_tmp3_fu_383_p3: sel_tmp1_fu_375_p3);
assign tmp1_fu_337_p2 = (tmp_20_fu_305_p2 & tmp_18_reg_517);
assign tmp8_fu_309_p2 = (tmp_17_fu_301_p2 & tmp_13_fu_291_p2);
assign tmp9_fu_331_p2 = (tmp_13_fu_291_p2 & sel_tmp4_fu_325_p2);
assign tmp_10_fu_281_p2 = (notrhs_fu_275_p2 | notlhs_fu_269_p2);
assign tmp_12_fu_287_p2 = (tmp_10_reg_491 & tmp_11_reg_500);
assign tmp_13_fu_291_p2 = (tmp_12_fu_287_p2 ^ ap_const_lv1_1);
assign tmp_15_fu_297_p2 = (tmp_10_reg_491 & tmp_14_reg_505);
assign tmp_16_fu_180_opcode = ap_const_lv5_4;
assign tmp_16_fu_180_p0 = ave_1_reg_481;
assign tmp_16_fu_180_p1 = ap_const_lv32_41000000;
assign tmp_17_fu_301_p2 = (tmp_10_reg_491 & tmp_16_reg_511);
assign tmp_18_fu_185_opcode = ap_const_lv5_3;
assign tmp_18_fu_185_p0 = ave_1_reg_481;
assign tmp_18_fu_185_p1 = ap_const_lv32_40800000;
assign tmp_19_fu_190_opcode = ap_const_lv5_4;
assign tmp_19_fu_190_p0 = ave_1_reg_481;
assign tmp_19_fu_190_p1 = ap_const_lv32_40E00000;
assign tmp_1_fu_421_p2 = ($signed(i_reg_137) + $signed(ap_const_lv31_7FFFFFFF));
assign tmp_20_fu_305_p2 = (tmp_10_reg_491 & tmp_19_reg_522);
assign tmp_22_fu_354_p2 = (tmp_10_reg_491 & grp_fu_170_p2);
assign tmp_24_fu_370_p2 = (tmp_12_reg_527 | or_cond2_i_fu_359_p2);
assign tmp_25_fu_348_p2 = (sel_tmp6_fu_342_p2 | sel_tmp2_fu_315_p2);
assign tmp_2_fu_427_p1 = tmp_1_fu_421_p2;
assign tmp_3_fu_411_p2 = ($signed(valueNum) + $signed(ap_const_lv32_FFFFFFFF));
assign tmp_4_fu_416_p1 = $signed(tmp_3_fu_411_p2);
assign tmp_5_fu_255_p4 = {{ave_1_to_int_fu_252_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign tmp_6_fu_265_p1 = ave_1_to_int_fu_252_p1[22:0];
assign tmp_7_fu_220_p2 = (tempCount + ap_const_lv32_1);
assign tmp_8_fu_401_p2 = ($signed(i_cast_fu_397_p1) < $signed(valueNum)? 1'b1: 1'b0);
assign tmp_9_fu_406_p1 = i_reg_137;
assign tmp_9_i_fu_247_p1 = i_i_reg_126;
assign tmp_fu_209_p2 = ($signed(tempCount) < $signed(valueNum)? 1'b1: 1'b0);
assign tmp_i_fu_236_p2 = ($signed(i_i_cast_fu_232_p1) < $signed(valueNum)? 1'b1: 1'b0);
assign tmp_s_fu_215_p1 = $signed(tempCount);
always @ (posedge ap_clk)
begin
    tempThread_1_reg_553[31] <= 1'b0;
    tempThread2_reg_149[31] <= 1'b0;
    ap_return_preg[31] <= 1'b0;
end



endmodule //DetectorNewStep_Peak_Valley_Thread

